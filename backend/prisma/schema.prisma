generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  EDITED
  DELETE
  USER
}

enum SeenStatus {
  SENT
  SEEN
  USER
}

enum TypeChat {
  GROUP
  INDIVIDUAL
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String?
  birth     String?
  provider  String   @default("jwt")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Content     Content[]
  Chat        Chat[]        @relation("UserCreatedChats")
  ChatAdd     Chat[]        @relation("UserParticipantChats")
  DeletedChat DeletedChat[]

  @@map("users")
}

model Chat {
  id             String        @id @default(uuid())
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  active         Boolean
  createId       String
  type           TypeChat      @default(INDIVIDUAL)
  participantIds String[]      @default([])
  Content        Content[]
  DeletedChat    DeletedChat[]

  create       User   @relation("UserCreatedChats", fields: [createId], references: [id])
  participants User[] @relation("UserParticipantChats")
}

model Content {
  id         String     @id @default(uuid())
  message    String
  status     Status?
  seenStatus SeenStatus @default(SENT)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  authorId   String
  chatId     String
  type       String     @default("text")

  author User @relation(fields: [authorId], references: [id])
  chat   Chat @relation(fields: [chatId], references: [id])

  @@index([chatId])
  @@index([authorId])
}

model DeletedChat {
  id        String   @id @default(uuid())
  userId    String
  chatId    String
  deletedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean

  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  @@unique([userId, chatId])
}
